import sqlite3
from aiogram import types, Dispatcher
from datetime import datetime
from states import UserRegistration, TaskCreation, TaskEditing
from database import connect_db, insert_new_task, get_task_details, update_task, delete_task, insert_new_task
from keyboards import main_menu, skip_assistant_keyboard
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram import Bot
from config import BOT_TOKEN
import asyncio

bot = Bot(token=BOT_TOKEN)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect('database.db', check_same_thread=False)
cursor = conn.cursor()


async def send_welcome(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    cursor.execute('SELECT user_id FROM user WHERE user_id = ?', (user_id,))
    if cursor.fetchone() is None:
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º –∞–±–æ —ñ–º'—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
        await UserRegistration.waiting_for_nickname.set()
    else:
        await bot.send_message(message.from_user.id, "–í–µ–ª—å–º–∏—à–∞–Ω–æ–≤–Ω–∏–π, –≤–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –û—Å—å –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                               reply_markup=main_menu())


async def process_nickname(message: types.Message, state: FSMContext):
    nickname = message.text
    user_id = message.from_user.id
    cursor.execute('INSERT INTO user (user_id, user_name) VALUES (?, ?)', (user_id, nickname))
    conn.commit()
    await state.finish()
    await bot.send_message(message.from_user.id, "ü•≥ü•≥ü•≥–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Å–æ–±—ñ –∑–∞–¥–∞—á—ñ...",
                           reply_markup=main_menu())


async def create_task(message: types.Message):
    await TaskCreation.waiting_for_name.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ:")


async def task_name_received(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await TaskCreation.next()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á—ñ:")


async def task_type_received(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = message.text
    await TaskCreation.next()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∑–∞–¥–∞—á—ñ (–≤—ñ–¥ 1 –¥–æ 10):")


async def task_complexity_received(message: types.Message, state: FSMContext):
    complexity = message.text
    if complexity.isdigit() and 1 <= int(complexity) <= 10:
        async with state.proxy() as data:
            data['complexity'] = int(complexity)
        await TaskCreation.next()
        await message.reply("‚åõ–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω—É (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD):‚è≥")
    else:
        await message.reply("‚õî–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10 –¥–ª—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑–∞–¥–∞—á—ñ:‚õî")


async def task_end_date_received(message: types.Message, state: FSMContext):
    end_date = message.text
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏
        datetime.strptime(end_date, '%Y-%m-%d')
        async with state.proxy() as data:
            data['end_date'] = end_date
        await TaskCreation.next()
        await message.reply("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∑–∞–¥–∞—á—ñ:")
    except ValueError:
        await message.reply("‚õî–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD:‚õî")


async def task_description_received(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await TaskCreation.next()
    await message.reply("üêµ–í–≤–µ–¥—ñ—Ç—å ID –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' —è–∫—â–æ –≤ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑ –∫–∏–º —Ö–æ—á —â–æ—Å—å —Ä–æ–±–∏—Ç–∏ —ñ –≤–∑–∞–≥–∞–ª—ñ —Ç–∏ —Å–∞–º –ø–æ —Å–æ–±—ñ):üêµ",
                        reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data='skip_assistant')))


async def skip_assistant(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    data = await state.get_data()
    user_id = callback_query.from_user.id

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–µ —Ö–æ—Ç—ñ–ª–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —á–æ–≥–æ—Å—å
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, insert_new_task, user_id, data['name'], data['type'], data['complexity'],
                               data['end_date'], data['description'], None)

    await state.finish()
    await bot.send_message(callback_query.from_user.id, "‚úÖ‚úÖ‚úÖ–ü—Ä–æ–±–ª–µ–º—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –ú–æ–∂–µ—à –ø–æ—á–∏–Ω–∞—Ç–∏ —ó—ó –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏, –±–æ —Ç–∏ –∂ –æ–¥–∏–Ω —ó—ó –≤–∏—Ä—ñ—à—É—î—à...‚úÖ‚úÖ‚úÖ", reply_markup=main_menu())


async def assistant_id_received(message: types.Message, state: FSMContext):
    assistant_id = message.text if message.text.isdigit() else None
    await state.update_data(assistant_id=assistant_id)
    await create_task_in_db(message, state, message.from_user.id)


async def create_task_in_db(message: types.Message, state: FSMContext, user_id):
    async with state.proxy() as data:
        cursor.execute('''INSERT INTO tasks (user, name, type, complexity, end_date, disc, user_assist, closed)
                          VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                       (user_id, data['name'], data['type'], data['complexity'], data['end_date'], data['description'],
                        data['assistant_id'], 0))
        conn.commit()
    await state.finish()
    await bot.send_message(message.from_user.id, "‚úÖ‚úÖ‚úÖ–ü—Ä–æ–±–ª–µ–º—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!‚úÖ‚úÖ‚úÖ", reply_markup=main_menu())


# –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–¥–∞—á—ñ —Ç–∞ –ü—Ä–æ –º–µ–Ω–µ
async def show_active_tasks(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT id, name FROM tasks WHERE user=? AND closed=0', (user_id,))
    tasks = cursor.fetchall()
    if tasks:
        for task_id, task_name in tasks:
            task_info = f"–ó–∞–¥–∞—á–∞: {task_name}\n"
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–µ—Ç–∞–ª—ñ", callback_data=f"detail_{task_id}")],
                [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data=f"finish_{task_id}")],
                [InlineKeyboardButton(text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏(–Ω–µ —Ç—Ä–µ–±–∞, –≤–æ–Ω–æ –Ω–µ –ø—Ä–∞—Ü—é—î)", callback_data=f"edit_{task_id}")],
                [InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_{task_id}")]
            ])
            await message.answer(task_info, reply_markup=markup)
    else:
        # –Ø–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î, —Ç–æ —Ö–∞–π —Ö–æ—á –ø–æ–∫–∞–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è", callback_data='view_completed_tasks'))
        await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º)).", reply_markup=markup)


async def user_info(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT user_name FROM user WHERE user_id = ?', (user_id,))
    user_name = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM tasks WHERE user=? AND closed=0', (user_id,))
    active_tasks_count = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM tasks WHERE user=? AND closed=1', (user_id,))
    completed_tasks_count = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM tasks WHERE user=?', (user_id,))
    total_tasks_count = cursor.fetchone()[0]

    # –°–õ–ê–í–ê –£–ö–†–ê–á–ù–Ü!
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞", url="https://send.monobank.ua/jar/6GZHsYbu58"))
    markup.add(InlineKeyboardButton("–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ó–°–£", url="https://send.monobank.ua/jar/A2muaAZwj9"))

    await message.reply(f"ID: {user_id}\n"
                        f"–ù—ñ–∫–Ω–µ–π–º: {user_name}\n"
                        f"–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–¥–∞—á—ñ: {active_tasks_count}\n"
                        f"–ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–¥–∞—á—ñ: {completed_tasks_count}\n"
                        f"–£—Å—å–æ–≥–æ –∑–∞–¥–∞—á: {total_tasks_count}",
                        reply_markup=markup)


# –ù–ï –¢–†–û–ì–ê–¢–¨, –ü–†–ê–¶–Æ–Ñ –ù–ê –°–í–Ø–¢–û–ú–£ –°–õ–û–í–Ü!!!
async def task_detail(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split('_')[1])
    cursor.execute('SELECT name, type, complexity, end_date, disc, user_assist FROM tasks WHERE id=?', (task_id,))
    task = cursor.fetchone()
    if task:
        name, task_type, complexity, end_date, description, user_assist = task
        task_details = (f"–ù–∞–∑–≤–∞: {name}\n–¢–∏–ø: {task_type}\n–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {complexity}\n"
                        f"–î–µ–¥–ª–∞–π–Ω: {end_date}\n–û–ø–∏—Å: {description}\n –ê—Å–∏—Å—Ç–µ–Ω—Ç: {user_assist}")
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏!", callback_data=f"finish_{task_id}")],
            [InlineKeyboardButton(text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏(–Ω–µ —Ç—Ä–µ–±–∞, –≤–æ–Ω–æ –Ω–µ –ø—Ä–∞—Ü—é—î)", callback_data=f"choose_task_to_edit{task_id}")],
            [InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_{task_id}")]
        ])
        await bot.send_message(callback_query.from_user.id, task_details, reply_markup=markup)
    else:
        await bot.answer_callback_query(callback_query.id, text="–ó–∞–¥–∞—á—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    await bot.answer_callback_query(callback_query.id)


async def finish_task(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split('_')[1])
    cursor.execute('UPDATE tasks SET closed = 1 WHERE id = ?', (task_id,))
    conn.commit()
    await bot.answer_callback_query(callback_query.id, text="–ó–∞–¥–∞—á—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    await bot.send_message(callback_query.from_user.id, "–ó–∞–¥–∞—á—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ß–∞—Å –≤—ñ–¥–ø–æ—á–∏—Ç–∏...", reply_markup=main_menu())

# –¢–µ—Å—Ç —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
async def new_task_name_received(message: types.Message, state: FSMContext):
    new_name = message.text
    async with state.proxy() as data:
        task_id = data['task_id']


    update_task(task_id, 'name', new_name)
    await message.reply("–ù–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.finish()


async def delete_task(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split('_')[1])
    cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
    conn.commit()
    await bot.answer_callback_query(callback_query.id, text="–ó–∞–¥–∞—á—É –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await bot.send_message(callback_query.from_user.id, "–ó–∞–¥–∞—á—É –∑–Ω–∏—â–µ–Ω–Ω–æ –Ω–∞–∑–∞–≤–∂–¥–∏!", reply_markup=main_menu())


async def view_completed_tasks(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cursor.execute('SELECT id, name FROM tasks WHERE user=? AND closed=1', (user_id,))
    tasks = cursor.fetchall()
    if tasks:
        response = "–ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–¥–∞—á—ñ:\n"
        response += '\n'.join([f"{task[0]}: {task[1]}" for task in tasks])
        await bot.send_message(callback_query.from_user.id, response, reply_markup=main_menu())
    else:
        await bot.send_message(callback_query.from_user.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–¥–∞—á((", reply_markup=main_menu())
    await bot.answer_callback_query(callback_query.id)


async def view_completed_tasks_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cursor.execute('SELECT id, name FROM tasks WHERE user=? AND closed=1', (user_id,))
    tasks = cursor.fetchall()
    if tasks:
        response = "–ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–¥–∞—á—ñ:\n"
        response += '\n'.join([f"{task[0]}: {task[1]}" for task in tasks])
        await bot.send_message(callback_query.from_user.id, response, reply_markup=main_menu())
    else:
        await bot.send_message(callback_query.from_user.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–¥–∞—á((", reply_markup=main_menu())
    await bot.answer_callback_query(callback_query.id)
    pass

# –ù—É —è –Ω–∞–º–∞–≥–∞–≤—Å—è –∞–ª–µ –≤–æ–Ω–æ –Ω–µ –ø—Ä–∞—Ü—é—î
async def choose_task_to_edit(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT id, name FROM tasks WHERE user=?', (user_id,))
    tasks = cursor.fetchall()

    markup = InlineKeyboardMarkup()
    for task_id, task_name in tasks:
        markup.add(InlineKeyboardButton(task_name, callback_data=f'choose_attribute_to_edit_{task_id}'))

    await message.reply("–Ø –ñ –ö–ê–ñ–£, –í–û–ù–û –ù–ï –ü–†–ê–¶–Æ–Ñ", reply_markup=markup)


async def choose_attribute_to_edit(callback_query: types.CallbackQuery):
    task_id = callback_query.data.split('_')[1]
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞", callback_data=f"edit_task_name_{task_id}")],
        [InlineKeyboardButton(text="–¢–∏–ø", callback_data=f"edit_task_type_{task_id}")],
        [InlineKeyboardButton(text="–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å", callback_data=f"edit_task_complexity_{task_id}")],
        [InlineKeyboardButton(text="–î–µ–¥–ª–∞–π–Ω", callback_data=f"edit_task_end_date_{task_id}")],
        [InlineKeyboardButton(text="–û–ø–∏—Å", callback_data=f"edit_task_description_{task_id}")],
    ])
    await bot.send_message(callback_query.from_user.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=markup)


# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è 2
async def edit_task_name(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = callback_query.data.split('_')[1]
    await state.update_data(task_id=task_id)
    await state.set_state(TaskEditing.waiting_for_task_name)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ:")


# –¢–∏–ø
async def edit_task_type(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = callback_query.data.split('_')[1]
    await state.update_data(task_id=task_id)
    await state.set_state(TaskEditing.waiting_for_task_type)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–∏–ø –∑–∞–¥–∞—á—ñ:")


# –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
async def edit_task_complexity(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = callback_query.data.split('_')[1]
    await state.update_data(task_id=task_id)
    await state.set_state(TaskEditing.waiting_for_task_complexity)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∑–∞–¥–∞—á—ñ (–≤—ñ–¥ 1 –¥–æ 10):")


# –î–µ–¥–ª–∞–π–Ω
async def edit_task_end_date(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = callback_query.data.split('_')[1]
    await state.update_data(task_id=task_id)
    await state.set_state(TaskEditing.waiting_for_task_end_date)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD):")


# –û–ø–∏—Å
async def edit_task_description(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = callback_query.data.split('_')[1]
    await state.update_data(task_id=task_id)
    await state.set_state(TaskEditing.waiting_for_task_description)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å –∑–∞–¥–∞—á—ñ:")


async def update_task_attribute(message: types.Message, state: FSMContext):
    new_value = message.text
    data = await state.get_data()
    task_id = data['task_id']

    current_state = await state.get_state()
    if current_state == TaskEditing.waiting_for_task_name.state:
        attribute = 'name'
    elif current_state == TaskEditing.waiting_for_task_type.state:
        attribute = 'type'
    elif current_state == TaskEditing.waiting_for_task_complexity.state:
        attribute = 'complexity'
    elif current_state == TaskEditing.waiting_for_task_end_date.state:
        attribute = 'end_date'
        try:
            # –¢–£–ü–û –ö–û–î –ó –°–¢–ê–ö –û–í–ï–†–§–õ–û–£
            datetime.strptime(new_value, '%Y-%m-%d')
        except ValueError:
            await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD:")
            return
    elif current_state == TaskEditing.waiting_for_task_description.state:
        attribute = 'disc'

    update_task(task_id, attribute, new_value)

    await message.reply("–ó–∞–¥–∞—á—É –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.finish()


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(send_welcome, commands=['start', 'help'], state='*')
    dp.register_message_handler(process_nickname, state=UserRegistration.waiting_for_nickname)
    dp.register_message_handler(create_task, Text(equals="–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É"), state='*')
    dp.register_message_handler(task_name_received, state=TaskCreation.waiting_for_name)
    dp.register_message_handler(task_type_received, state=TaskCreation.waiting_for_type)
    dp.register_message_handler(task_complexity_received, lambda message: message.text.isdigit(),state=TaskCreation.waiting_for_complexity)
    dp.register_message_handler(task_end_date_received, state=TaskCreation.waiting_for_end_date)
    dp.register_message_handler(task_description_received, state=TaskCreation.waiting_for_description)
    dp.register_callback_query_handler(skip_assistant, lambda c: c.data == 'skip_assistant',state=TaskCreation.waiting_for_assistant)
    dp.register_message_handler(assistant_id_received, state=TaskCreation.waiting_for_assistant)
    dp.register_message_handler(user_info, Text(equals="–ü—Ä–æ –º–µ–Ω–µ"), state='*')
    dp.register_message_handler(show_active_tasks, Text(equals="–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–¥–∞—á—ñ"), state='*')
    dp.register_callback_query_handler(task_detail, lambda c: c.data and c.data.startswith('detail_'))
    dp.register_callback_query_handler(finish_task, lambda c: c.data and c.data.startswith('finish_'))
    dp.register_callback_query_handler(delete_task, lambda c: c.data and c.data.startswith('delete_'))
    dp.register_callback_query_handler(view_completed_tasks, lambda c: c.data == 'view_completed')
    dp.register_callback_query_handler(view_completed_tasks_callback, text='view_completed_tasks')
    dp.register_message_handler(choose_task_to_edit, commands=['choose_task_to_edit'], state='*')
    dp.register_callback_query_handler(choose_attribute_to_edit, lambda c: c.data and c.data.startswith('choose_attribute_to_edit_'))
    dp.register_callback_query_handler(edit_task_name, lambda c: c.data and c.data.startswith('edit_task_name_'),state='*')
    dp.register_callback_query_handler(edit_task_type, lambda c: c.data and c.data.startswith('edit_task_type_'),state='*')
    dp.register_callback_query_handler(edit_task_complexity,state='*')
    dp.register_callback_query_handler(edit_task_end_date,state='*')
    dp.register_callback_query_handler(edit_task_description,lambda c: c.data and c.data.startswith('edit_task_description_'), state='*')
    dp.register_message_handler(update_task_attribute, state=TaskEditing.waiting_for_task_name)
    dp.register_message_handler(update_task_attribute, state=TaskEditing.waiting_for_task_type)
    dp.register_message_handler(update_task_attribute, state=TaskEditing.waiting_for_task_complexity)
    dp.register_message_handler(update_task_attribute, state=TaskEditing.waiting_for_task_end_date)
    dp.register_message_handler(update_task_attribute, state=TaskEditing.waiting_for_task_description)
